{
    "contents" : "---\ntitle: 'Reproducible Research: Peer Assessment 1'\noutput:\n  html_document:\n    number_sections: yes\n    theme: journal\n    toc: yes\n---\n\nfirst let's load the libraries we will use.  \n\n```{r}\nlibrary(Hmisc) # used for imputation, should be loaded before 'psych'!\nlibrary(ggplot2) # prettier plots\nlibrary(psych) # describe function\nlibrary(knitr) # tables, mainly\n```\n\n\n## Loading and preprocessing the data\n\nLet's load the data. We start by \n\n1. unzipping it, \n2. reading it and \n3. having a quick look...\n\n```{r}\n\nunzip('activity.zip')\ndata <- read.csv2(\"activity.csv\", sep=\",\")\nkable(head(data) ,\n      digits = 2 ,\n      caption = \"A quick preview of the dataset\" ,\n      align=\"c\"\n      )\n\nkable(summary(data) ,\n      digits = 2 ,\n      caption = \"Some statistics about our dataset\")\n```\n\n\n\n\n## What is mean total number of steps taken per day?\n\nNow we focus on the steps taken each day. We do so by aggregating the steps by each unique day, using the `aggregate` function.\n\n```{r}\naggregated_steps <- aggregate(data$steps ,\n                              by = list(data$date) , \n                              FUN = sum)\nnames(aggregated_steps) <- c('date','steps') # Let's keep the naming of columns the same! \nqplot(aggregated_steps$steps)\n\n```\n\nThe `mean` is: \n\n```{r}\nmean(aggregated_steps$steps, na.rm = T)\n```\n\nThe `median`:\n```{r}\nmedian(aggregated_steps$steps, na.rm = T)\n```\n\nOr to be thorough:\n\n\n```{r}\nkable(describe(aggregated_steps$steps) , \n      digits = 2 , \n      align = 'c' , \n      row.names = F , \n      caption = \"Statistics about aggregated steps\")\n\nggplot(aggregated_steps, aes(x=steps))+geom_density(fill=1, alpha=.3)\n```\n\n\n\n## What is the average daily activity pattern?\n\nSo what does the day look like for our fitbit/jawbone wearing subject? for that, we turn to another `aggregation`!\n\nWhat we will also do is divide the intervals by *100*, giving us the hours!\n\n```{r}\ninterval_agg <- aggregate(data$steps , \n                          by = list(data$interval) , \n                          FUN = mean , \n                          na.rm = T )\n\nnames(interval_agg)<-c('interval','steps')\n\ninterval_agg$interval <- interval_agg$interval / 100\n\nggplot(interval_agg, aes(interval,steps))+geom_line()+xlab(\"hours\")+ylab(\"average steps\")+scale_x_continuous(breaks=seq(0,23.55,1))\n\n```\n\nAs you may have expected from our plot, our subject is mostly active between 8 and 9. The most active time in terms of steps (on average) is:\n\n```{r}\ninterval_agg$interval[interval_agg$steps==max(interval_agg$steps)] # that is: 08:35\n```\n\n## Imputing missing values\n\nUnfortunately, there are missing values in our dataset.\n\n```{r}\npaste(c(\"There are\",length(data$steps[is.na(data$steps)==T]), \"missing.\"  ), collapse=\" \")\npaste(c(\"Which amounts to\",length(data$steps[is.na(data$steps)==T])/length(data$steps)*100,'%'), collapse = \" \")\n```\n\n\nWe will want to impute some missing values. There are several ways to do this, ranging from [advanced](http://www.jstatsoft.org/v45/i02/paper) to [simple](http://www.r-bloggers.com/example-2014-5-simple-mean-imputation/), but we will be [**generic**](http://svitsrv25.epfl.ch/R-doc/library/Hmisc/html/impute.html). Just think of it as an assumption that the [regression towards the mean](http://en.wikipedia.org/wiki/Regression_toward_the_mean) holds.\n\n```{r}\naggregated_steps$steps.i <- impute(aggregated_steps$steps, mean, na.rm=T)\n```\n\nSo how does that change our estimates?\n\nThe `mean` is: \n\n```{r}\nmean(aggregated_steps$steps.i, na.rm = T)\n```\n\nThe `median`:\n```{r}\nmedian(aggregated_steps$steps.i, na.rm = T)\n```\n\nOr to be thorough:\n\n\n```{r}\nkable(describe(aggregated_steps$steps.i) , \n      digits = 2 , \n      align = 'c' , \n      row.names = F , \n      caption = \"Statistics about aggregated steps\")\n\nggplot(aggregated_steps, aes(x=steps.i))+geom_density(fill=1, alpha=.3)\n```\n\n\n## Are there differences in activity patterns between weekdays and weekends?\n\nFirst, let's look at the getting the weekdays.\n\n```{r}\n\ndata$weekdays <- weekdays(as.Date(data$date)) # sorry if it's Dutch on you machine... \n\n```\n\nSo, now we aggregate and ecludiate!\n\n```{r}\nweekday_agg_mean <- aggregate(data$steps , by = list(data$weekdays), FUN = mean, na.rm=T)\nweekday_agg_sd <- aggregate(data$steps , by = list(data$weekdays) , FUN = sd, na.rm=T)\nboth_weekday <- merge(weekday_agg_mean, weekday_agg_sd, by = \"Group.1\")\n\nnames(both_weekday)<-c(\"weekday\",\"mean\",\"st.dev\")\nboth_weekday$weekday<-factor(both_weekday$weekday, levels = c(\"maandag\", \"dinsdag\",\"woensdag\",\"donderdag\",\"vrijdag\",\"zaterdag\",\"zondag\"))\nsummary(both_weekday)\n```\n\nWe can now look at the mean number of steps each day\n\n```{r}\nggplot(both_weekday, aes(x = weekday, y = mean, fill=weekday))+geom_bar(stat=\"identity\")\n```\n\nAnd the standard deviation (which tells us something about the stress levels of our subject).\n\n```{r}\nggplot(both_weekday, aes(x=weekday, fill=weekday, y=st.dev))+geom_bar(stat=\"identity\")\n```\n\nFinally, we combine them into two sets and aggregate them by minute. This shows us that generally, during the week steps are limited to the morning rush to work (?) with small spurt during the day. By contrast, the weekend shos activity throughout the day (even before 12:00!) and up to around 24:00.\n\n```{r}\n# split the data by the working-week and weekend\nweek <- data[data$weekday %in% c(\"maandag\",\"dinsdag\",\"woensdag\",\"donderdag\",\"vrijdag\"),]\nweekend <- data[!data$weekday %in% c(\"maandag\",\"dinsdag\",\"woensdag\",\"donderdag\",\"vrijdag\"),]\n# Aggregate each dataset by interval\nweekint <- aggregate(week$steps, by = list(week$interval), FUN = mean, na.rm = T)\nweekendint <- aggregate(weekend$steps, by = list(weekend$interval), FUN = mean, na.rm = T)\n# Add distinguishing feature\nweekint$week<- \"Week\"\nweekendint$week<- \"Weekend\"\nall <- rbind(weekint,weekendint)\nnames(all)<-c(\"interval\",\"steps\",\"week\")\nall$interval <- all$interval / 100\n# Plot the results\nggplot(all,aes(interval,steps,color=factor(week)))+geom_step()+facet_wrap(~week,nrow=2)\n```\n\n",
    "created" : 1418325571927.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2373975846",
    "id" : "9D093C8A",
    "lastKnownWriteTime" : 1418340473,
    "path" : "C:/Users/Bob/Dropbox/Courses/reproducible research/RepData_PeerAssessment1/PA1_template.Rmd",
    "project_path" : "PA1_template.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}